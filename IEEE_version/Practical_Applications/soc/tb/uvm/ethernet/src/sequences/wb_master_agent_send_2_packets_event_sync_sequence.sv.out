     1	class send_2_packets_event_sync_sequence extends base_sequence;
     2	
     3	   init_tx_seq tx_seq;
     4	   setup_txbd_sequence  txbd_sequence;
     5	   tx_interrupt_seq  tx_int_sequence;
     6	   initialize_txbd_rxbd_sequence  initialize_desc_seq;
     7	   write_master_single single_seq;
     8	   read_master_single single_seq_read;
     9	   uvm_event send_2_pkt_event;
    10	
    11	   `uvm_object_utils(send_2_packets_event_sync_sequence)
    12	   `uvm_declare_p_sequencer(wb_master_seqr)
    13	   
    14	
    15	   function new(string name = "send_2_packets_event_sync_sequence");
    16	      super.new(name);
    17	   endfunction:new
    18	
    19	   virtual task body();
    20	      uvm_reg_data_t reg_data;
    21	      uvm_status_e reg_status;
    22	
    23	      uvm_config_db #(uvm_event)::get(null,"","transmit_b",send_2_pkt_event);
    24	
    25	      p_sequencer.regmodel.MODER.write(.status(reg_status), .value(0), .path(UVM_FRONTDOOR), .parent(this));
    26	    
	.....
    57		single_seq_read.start(p_sequencer);
    58	      send_2_pkt_event.trigger();
    59	   endtask
    60	endclass
    61	
    62	
    63	
