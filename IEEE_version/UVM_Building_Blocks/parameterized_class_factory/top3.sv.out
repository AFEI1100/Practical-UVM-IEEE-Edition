1   import uvm_pkg::*;
2   class packet extends uvm_object;
   3     `uvm_object_utils(packet)
   4   endclass
5   
  6   class packetD extends packet;
     7     `uvm_object_utils(packetD)
     8   endclass
9   
  10   class my_driver1 #(type T=uvm_object) extends uvm_driver;
     11   
       12     // parameterized classes must use the _param_utils version
	 13     `uvm_component_param_utils(my_driver1 #(T))
     14   
       15     // our packet type; this can be overridden via the factory
	 16     T pkt;
     17   
       18     // standard component constructor
	 19     function new(string name, uvm_component parent=null);
	    20       super.new(name,parent);
	    21     endfunction
     22   
       23     // get_type_name not implemented by macro for parameterized classes
	 24     const static string type_name = {"my_driver1 #(",T::type_name,")"};
     25     virtual function string get_type_name();
	26       return type_name;
	27     endfunction
     28   
       29     // using the factory allows pkt overrides from outside the class
	 30     virtual function void build_phase(uvm_phase phase);
	    31       pkt = packet::type_id::create("pkt",this);
	    32     endfunction
     33   
       34     // print the packet so we can confirm its type when printing
	 35     virtual function void do_print(uvm_printer printer);
	    36       printer.print_object("pkt",pkt);
	    37     endfunction
     38   
       39   endclass
40   
  41   
    42   class my_driver21 #(type T=uvm_object) extends my_driver1 #(T);
       43   
	 44     `uvm_component_param_utils(my_driver21 #(T))
       45   
	 46     function new(string name, uvm_component parent=null);
	    47       super.new(name,parent);
	    48     endfunction
       49   
	 50     const static string type_name = {"my_driver21 #(",T::type_name,")"};
       51     virtual function string get_type_name();
	  52      return type_name;
	  53     endfunction
       54   
	 55   endclass
56   
  57   class my_driver22 #(type T=uvm_object) extends my_driver1 #(T);
     58   
       59     `uvm_component_param_utils(my_driver22 #(T))
     60   
       61     function new(string name, uvm_component parent=null);
	  62       super.new(name,parent);
	  63     endfunction
     64   
       65     const static string type_name = {"my_driver22 #(",T::type_name,")"};
     66     virtual function string get_type_name();
	67       return type_name;
	68     endfunction
     69   
       70   endclass
71   
  72   // typedef some specializations for convenience
    73   typedef my_driver1  #(packet) B_driver;   // the base driver
74   typedef my_driver21 #(packet) D1_driver;  // a derived driver
75   typedef my_driver22 #(packet) D2_driver;  // another derived driver
76   typedef my_driver22 #(packet) C_driver;  // another derived driver
77   
  78   class agent extends uvm_agent;
     79   
       80     `uvm_component_utils(agent)
     81     
       82    B_driver driver0;
     83    B_driver driver1;
     84    C_driver driver2;
     85   
       86     function new(string name, uvm_component parent=null);
	  87       super.new(name,parent);
	  88     endfunction
     89   
       90     virtual function void build_phase(uvm_phase phase);
	  91   
	    92       // override the packet type for driver0 and below
	      93       packet::type_id::set_inst_override(packetD::get_type(),"driver0.*");
	  94   
	    95       // create using the factory; actual driver types may be different
	      96        driver0 = B_driver::type_id::create("driver0",this);
	  97       driver1 = B_driver::type_id::create("driver1",this);
	  98   
	    99     endfunction
     100   
       101   endclass
102   class env extends uvm_env;
   103   
     104     `uvm_component_utils(env)
   105   
     106     agent agent0;
   107     agent agent1;
   108     agent agent2;
   109   
     110     function new(string name, uvm_component parent=null);
	111       super.new(name,parent);
	112     endfunction
   113   
     114     virtual function void build_phase(uvm_phase phase);
	115   	// set a override for one specific instance
	  116       // - via the component's proxy (same approach as create)...
	    117       B_driver::type_id::set_inst_override(D2_driver::get_type(),
							   118                                           "agent1.driver0",this);
	119   
	  120   	// direct factory call
	    121       set_inst_override_by_type({"top.env0.agent1.driver1"},
						122                                 B_driver::get_type(),
						123                                 D1_driver::get_type());
	124   
	  125      // Replace all base drivers with derived drivers...
	    126   
	      127       // create agents using the factory; actual agent types may be different
		128       agent0 = agent::type_id::create("agent0",this);
	129       agent1 = agent::type_id::create("agent1",this);
	130       agent2 = agent::type_id::create("agent2",this);
	131   
	  132     endfunction
   133   
     134     // at end_of_elaboration, print topology and factory state to verify
       135     virtual function void end_of_elaboration_phase(uvm_phase phase);
	  136       uvm_top.print_topology();
	  137     endfunction
   138   
     139     virtual task run_phase(uvm_phase phase);
	140       #100 global_stop_request();
	141     endtask
   142   
     143   endclass
144   
  145   module top;
   146   
     147     env env0;
   148   
     149     initial begin
	150   
	  151       // Being registered first, the following overrides take precedence
	    152       // over any overrides made within env0's construction & build.
	      153   
		154   
		  155   
		    156   
		      157       // - via a direct call to a factory method...
			158       factory.set_inst_override_by_type(B_driver::get_type(),
								    159                                         D2_driver::get_type(),
								    160                                         "env0.agent2.driver1");
	161   
	  162   
	    163       // - via a direct call to a factory method
	      164       factory.set_inst_override_by_type(B_driver::get_type(),
							  165                                         D1_driver::get_type(),
							  166                                     "env0.agent2.driver0"); 
	167   
	  168       // now, create the environment; our factory configuration will
	    169       // govern what topology gets created
	      170       env0 = new("env0");
	171       factory.print();
	172   
	  173       // run the test (will execute build phase)
	    174       run_test();
	175   
	  176     end
   177   
     178   endmodule
179   
  180   
